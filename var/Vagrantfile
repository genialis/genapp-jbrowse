# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "gendev-18"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://data.genialis.com/repo/3f92c79f-888b-4655-9eda-af46a5bd9c1f/6b68b4006399fd1b632ef89ce53815af10db70cb/?file_name=gendev-18.box&op=download&t=6a94afa272&p=/Boxes/gendev-18.box"

  # Configure Vagrant SSH access
  config.ssh.username = "root"
  config.ssh.private_key_path = File.expand_path("~/.ssh/gendev_id_rsa")

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080
  config.vm.network :forwarded_port, guest: 22, host: 10122     # SSH
  config.vm.network :forwarded_port, guest: 10222, host: 10222  # SSH to main-polyglot.gendev.g
  config.vm.network :forwarded_port, guest: 5432, host: 10132   # PostgreSQL
  config.vm.network :forwarded_port, guest: 27017, host: 10117  # MongoDB
  config.vm.network :forwarded_port, guest: 28017, host: 10118  # MongoDB debugging REST web interface
  config.vm.network :forwarded_port, guest: 80, host: 10180     # Nginx using uWSGI for Django web application
  config.vm.network :forwarded_port, guest: 8000, host: 10181   # Manual Django (./manage.py runserver 0.0.0.0:8000)

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/srv/gendev_web", :owner => "genesis-web", :group => "genesis-web"
  config.vm.synced_folder ".", "/srv/gendev_worker", :owner => "genesis-worker", :group => "genesis-worker"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    # vb.gui = true

    # Specify memory and CPU cores for the guest machine
    vb.customize ["modifyvm", :id, "--memory", "2048"]
    vb.customize ["modifyvm", :id, "--cpus", "2"]
  end

  # Provisioning using a shell script
  $script = <<-__EOF__
    echo "\n[default] Patching temporary hacks..."
    echo "gendev_web  /srv/gendev_web  vboxsf  uid=genesis-web,gid=genesis-web" | tee -a /etc/fstab
    echo "gendev_worker  /srv/gendev_worker  vboxsf  uid=genesis-worker,gid=genesis-worker" | tee -a /etc/fstab

    ################################################
    # JBrowse
    ################################################
    echo "\n[default] Setting up JBrowse ...."
    apt-get update
    apt-get install zip unzip
    apt-get install -ym libpng-dev libgd2-noxpm-dev build-essential libdatetime-perl curl

    cd /srv
    mkdir genome_browser
    cd genome_browser

    wget http://jbrowse.org/releases/JBrowse-1.11.3.zip
    unzip JBrowse-1.11.3.zip
    rm JBrowse-1.11.3.zip
    mv JBrowse-1.11.3 jbrowse
    cd jbrowse
    ./setup.sh
    ################################################
    # / JBrowse
    ################################################

    mkdir -p /srv/gendev_web/static
    chown genesis-web:genesis-web /srv/gendev_web/static
    rm -rf /srv/gendev_web/static/*

    echo "\n[default] Patches to migrate into next box..."
    usermod -a -G genesis-worker genesis-web
    dropdb gendev_web -U postgres
    createdb gendev_web -U postgres -O genesis
    mkdir -p /srv/tmp/media
    chmod -R 777 /srv/tmp

    echo "\n[default] Migrating and restarting services..."
    source /srv/gendev_venv/bin/activate
    cd '/srv/gendev_web'
    export DJANGO_SETTINGS_MODULE='genesis.settings.gendev'
    pip install -r /srv/gendev_web/requirements.txt
    python manage.py syncdb --noinput
    python manage.py migrate --fake
    python manage.py loaddata .tmp/fixture.json

    /root/bin/gendev_web_migrate.sh
    /etc/init.d/celeryd_gendev_worker restart

    echo "\n[default] Importing data..."
    python manage.py import
    echo
    echo "[default] Done. (Remember to use 'vagrant destroy' if anything goes wrong.)"
    exit 0
  __EOF__
  config.vm.provision :shell, :inline => $script
end
